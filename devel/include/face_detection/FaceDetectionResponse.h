// Generated by gencpp from file face_detection/FaceDetectionResponse.msg
// DO NOT EDIT!


#ifndef FACE_DETECTION_MESSAGE_FACEDETECTIONRESPONSE_H
#define FACE_DETECTION_MESSAGE_FACEDETECTIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <face_detection/BoundingBox.h>

namespace face_detection
{
template <class ContainerAllocator>
struct FaceDetectionResponse_
{
  typedef FaceDetectionResponse_<ContainerAllocator> Type;

  FaceDetectionResponse_()
    : faces()  {
    }
  FaceDetectionResponse_(const ContainerAllocator& _alloc)
    : faces(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::face_detection::BoundingBox_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::face_detection::BoundingBox_<ContainerAllocator> >::other >  _faces_type;
  _faces_type faces;





  typedef boost::shared_ptr< ::face_detection::FaceDetectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::face_detection::FaceDetectionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FaceDetectionResponse_

typedef ::face_detection::FaceDetectionResponse_<std::allocator<void> > FaceDetectionResponse;

typedef boost::shared_ptr< ::face_detection::FaceDetectionResponse > FaceDetectionResponsePtr;
typedef boost::shared_ptr< ::face_detection::FaceDetectionResponse const> FaceDetectionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::face_detection::FaceDetectionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::face_detection::FaceDetectionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace face_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'face_detection': ['/home/zeyuzhang/Workspace/ROS-WebCam-Face-Detection/src/face_detection/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::face_detection::FaceDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::face_detection::FaceDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::face_detection::FaceDetectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::face_detection::FaceDetectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_detection::FaceDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_detection::FaceDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::face_detection::FaceDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa940aaf6223f02cb4030d2ceab1ee56";
  }

  static const char* value(const ::face_detection::FaceDetectionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa940aaf6223f02cULL;
  static const uint64_t static_value2 = 0xb4030d2ceab1ee56ULL;
};

template<class ContainerAllocator>
struct DataType< ::face_detection::FaceDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "face_detection/FaceDetectionResponse";
  }

  static const char* value(const ::face_detection::FaceDetectionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::face_detection::FaceDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BoundingBox[] faces\n\
\n\
================================================================================\n\
MSG: face_detection/BoundingBox\n\
int64 x\n\
int64 y\n\
int64 width\n\
int64 height\n\
";
  }

  static const char* value(const ::face_detection::FaceDetectionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::face_detection::FaceDetectionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.faces);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaceDetectionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::face_detection::FaceDetectionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::face_detection::FaceDetectionResponse_<ContainerAllocator>& v)
  {
    s << indent << "faces[]" << std::endl;
    for (size_t i = 0; i < v.faces.size(); ++i)
    {
      s << indent << "  faces[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::face_detection::BoundingBox_<ContainerAllocator> >::stream(s, indent + "    ", v.faces[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FACE_DETECTION_MESSAGE_FACEDETECTIONRESPONSE_H
